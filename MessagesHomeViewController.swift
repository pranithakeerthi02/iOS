//
//  MessagesViewController.swift
//  DCU
//
//  Created by Dixital Group LLC on 9/24/18.
//  Copyright Â© 2018 Dixital Group LLC. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var DCUTitle: UILabel!
    
    @IBOutlet weak var Text: UITextView!
    
    
    @IBAction func Start(_ sender: UIButton) {
        
        self.performSegue(withIdentifier: "SecondViewSegue", sender: self)
        
        let session = activeConversation?.selectedMessage?.session ?? MSSession()
        let layout = MSMessageTemplateLayout()
        layout.caption = "DixitalGroup is sending you"
        layout.subcaption = "Tap here to claim or decline the cash!"
        layout.image = UIImage(named: "image.jpg")
        
        let message = MSMessage(session: session)
        message.layout = layout
        
        self.activeConversation?.insert(message, completionHandler: nil)
        
//        if self.presentationStyle == .expanded {
//            self.requestPresentationStyle(.compact)
//        }
        
        
    }
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
       
        
//        if (conversation.selectedMessage?.senderParticipantIdentifier == activeConversation?.localParticipantIdentifier) {
//            print("hello")
//        }
        if (conversation.selectedMessage != nil) {
           
            let storyBoard : UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
            let newViewController = storyBoard.instantiateViewController(withIdentifier: "RecieverView")
            self.present(newViewController, animated: true, completion: nil)
        }
        
        // Use this method to configure the extension and restore previously stored state.
       }
    
    private func isSenderSameAsRecipient() -> Bool {
        guard let conversation = activeConversation else { return false }
        guard let message = conversation.selectedMessage else { return false }
        
        return message.senderParticipantIdentifier == conversation.localParticipantIdentifier
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
