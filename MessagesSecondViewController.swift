//
//  MessagesSecondViewController.swift
//  DCU
//
//  Created by Dixital Group LLC on 10/3/18.
//  Copyright Â© 2018 Dixital Group LLC. All rights reserved.
//

import UIKit
import Messages

class MessagesSecondViewController: MSMessagesAppViewController {
    
    var amount: String = ""
    
    @IBOutlet weak var DCULabel: NSLayoutConstraint!
    
    @IBOutlet var dollarLabel: UILabel!
    
    @IBOutlet var EnteredAmount: UITextField!
    @IBAction func startedEntering(_ sender: UITextField) {
 
    }

    @IBAction func RequestPressed(_ sender: UIButton) {
    
        amount = EnteredAmount.text!
        
        let layout = MSMessageTemplateLayout()
        layout.caption = "DixitalGroup is requesting you for $\(amount)"
        layout.subcaption = "Tap here to send or decline the requested cash!"
        layout.image = UIImage(named: "image.jpg")
        
        let message = MSMessage(session: self.activeConversation?.selectedMessage?.session ?? MSSession())
        message.layout = layout
        
        activeConversation?.insert(message, completionHandler: {(error) in if let error = error {
            print(error)
            }
            self.dismiss()
        })
        
    }
   
    
    @IBAction func PayPressed(_ sender: UIButton) {
        
        let session = activeConversation?.selectedMessage?.session ?? MSSession()
        
        let layout = MSMessageTemplateLayout()
        layout.caption = "DixitalGroup is sending you $\(amount)"
        layout.subcaption = "Tap here to claim or decline the cash!"
        layout.image = UIImage(named: "image.jpg")
        
        let message = MSMessage(session: session)
        message.layout = layout
        
        self.activeConversation?.insert(message, completionHandler: nil)
        
    }
    
    

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        let toolBar = UIToolbar()
        toolBar.sizeToFit()
        
        let flexibleSpace = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
        
        let doneButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.done, target: self, action: #selector(self.doneClicked))
        
        toolBar.setItems([flexibleSpace, doneButton], animated: true)
        
        EnteredAmount.inputAccessoryView = toolBar
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: UIResponder.keyboardWillChangeFrameNotification, object: nil)
        
        
        
    }
    
    deinit{
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillChangeFrameNotification, object: nil)
    }
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
//        let storyboard = UIStoryboard(name: "MainInterface", bundle: nil)
//        
//        let recieverVC = storyboard.instantiateViewController(withIdentifier: "MessagesRecieverViewController")as! MessagesRecieverViewController
//        
//        self.navigationController?.pushViewController(recieverVC, animated: true)
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
       
//        if self.presentationStyle == MSMessagesAppPresentationStyle.compact {
//            self.requestPresentationStyle(MSMessagesAppPresentationStyle.expanded)
//        }
        
        // Use this method to prepare for the change in presentation style.
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    @objc func doneClicked() {
        view.endEditing(true)
    }
    
    @objc func keyboardWillChange(notification: Notification){
        guard let keyboardRect = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue else{
            return
        }
        
        if notification.name == UIResponder.keyboardWillShowNotification || notification.name == UIResponder.keyboardWillChangeFrameNotification {
            
            view.frame.origin.y = -keyboardRect.height
        
        }
        
        else {
            
            view.frame.origin.y = 0
            
        }
    }
    
    private func isSenderSameAsRecipient() -> Bool {
        guard let conversation = activeConversation else { return false }
        guard let message = conversation.selectedMessage else { return false }
        
        return message.senderParticipantIdentifier == conversation.localParticipantIdentifier
    }
    
   
    
}
